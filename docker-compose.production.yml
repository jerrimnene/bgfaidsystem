version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: bgf-database-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-bgf_aid_system}
      POSTGRES_USER: ${DB_USER:-bgf_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/pgdata
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - bgf-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-bgf_user} -d ${DB_NAME:-bgf_aid_system}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for session storage
  redis:
    image: redis:7-alpine
    container_name: bgf-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - bgf-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bgf-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      
      # Database
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-bgf_aid_system}
      DB_USER: ${DB_USER:-bgf_user}
      DB_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: postgresql://${DB_USER:-bgf_user}:${DB_PASSWORD}@database:5432/${DB_NAME:-bgf_aid_system}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}
      
      # CORS
      CORS_ORIGIN: ${FRONTEND_URL}
      CORS_CREDENTIALS: true
      
      # SendGrid Email (optional)
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL}
      FROM_NAME: ${FROM_NAME}
      
      # Twilio SMS (optional)
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      
      # Security
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # Organization
      ORG_NAME: ${ORG_NAME:-Bridging Gap Foundation}
      ORG_ABBREVIATION: ${ORG_ABBREVIATION:-BGF}
      ORG_EMAIL: ${ORG_EMAIL}
      ORG_PHONE: ${ORG_PHONE}
      
      # URLs
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: ${BACKEND_URL}

    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - bgf-network-prod
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-BGF Aid System}
        NEXT_PUBLIC_ORG_NAME: ${NEXT_PUBLIC_ORG_NAME:-Bridging Gap Foundation}
    container_name: bgf-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-BGF Aid System}
      NEXT_PUBLIC_ORG_NAME: ${NEXT_PUBLIC_ORG_NAME:-Bridging Gap Foundation}
    networks:
      - bgf-network-prod
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bgf-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    networks:
      - bgf-network-prod
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  nginx_logs_prod:
    driver: local

networks:
  bgf-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16